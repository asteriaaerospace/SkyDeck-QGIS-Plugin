# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ManageSkydeck
                                 A QGIS plugin
 This is a plugin to download files from Skydeck, process it in QGIS and upload the results back to Skydeck portal.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-03-10
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Asteria
        email                : neethu.narayanan@asteria.co.in
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QUrl
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QListWidgetItem
from qgis.core import QgsRasterLayer, QgsProject, QgsVectorLayer, QgsRasterFileWriter, QgsRasterPipe, QgsCoordinateReferenceSystem, QgsVectorFileWriter
from qgis.utils import iface


from .resources import *

from .manage_skydeck_dialog import ManageSkydeckDialog
from .import_export import ImportExportWindow
import os.path
import requests
import tempfile
import sys

import os
import platform
import subprocess
from urllib.parse import urlparse, parse_qs

try:
    from azure.storage.blob import BlobServiceClient
except ImportError:
    if platform.system() == 'Linux':
        subprocess.run(['pip', 'install', 'azure-storage-blob'])
    elif platform.system() == 'Darwin':
        current_path = sys.executable
        last_slash_index = current_path.rfind('/')
        install_path = current_path[:last_slash_index]
        #subprocess.run(["cd", current_path], shell=True)
        subprocess.run([install_path+'/bin/pip3', 'install', 'azure-storage-blob'])
    else:
        current_path = os.getcwd()
        subprocess.run(["cd", current_path], shell=True)
        subprocess.run(['pip', 'install', 'azure-storage-blob'], shell=True)
finally:
    from azure.storage.blob import BlobServiceClient




class ManageSkydeck:
    """QGIS Plugin Implementation."""

    endpoint = "https://skydeck.asteria.co.in"
    blob_endpoint = "https://skydeckcorefilestrgprd.blob.core.windows.net"

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        self.dlg = ManageSkydeckDialog()

        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ManageSkydeck_{}.qm'.format(locale))
        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SkyGIS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        #self.open_web_page()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ManageSkydeck', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/manage_skydeck/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        
        # self.dlg.importConnectButton.clicked.connect(self.fetchSkydeckData)
        # self.dlg.importpushButton.clicked.connect(self.addQGISLayer)
        # self.dlg.exportConnectButton.clicked.connect(self.fetchQGISData)
        #self.dlg.exportPushButton.clicked.connect(self.uploadToSkydeck)
        self.dlg.loginButton.clicked.connect(self.open_web_page)
        # will be set False in run()

        # self.open_web_page()
        #self.first_start = True
    

    def on_url_changed(self, url):
        if self.initial_redirection_done:
            print(f"Bearer  will be processed here")
            self.web_view.loadFinished.connect(self.on_load_finished)

        else:
            self.initial_redirection_done = True
            print("Ignoring the first URL change event.")

    def on_load_finished(self, ok):
        # This slot is called when the web page has finished loading.
        if ok:
            print("Page loaded successfully. Processing the page.")
            frame = self.web_view.page().mainFrame()
            url = frame.url().toString()
            print("printing url")
            print(url)
            parsed_url = urlparse(url)
            query_params = parse_qs(parsed_url.query)
            token = query_params.get('token', [None])[0]
            print(f"Token: {token}")
            self.handle_token(token)
        else:
            print("Failed to load page")


    def handle_token(self, token):
        if token:
            print("Token is valid")
            self.dlg.close()
            self.import_export_window = ImportExportWindow(token)
            self.import_export_window.show()
            # print(f"Bearer {token}")
            # headers = {"Authorization": f"Bearer {token}"}
            # response = requests.get(url="https://skydeck-staging.asteria.co.in/api/gis/v1/qgis/rbac", headers=headers)
            # print(f"Response message from rbac: {response}")
            # if response.status_code == 200:
            #     print("Token is valid")
            #     self.dlg.close()
            #     self.import_export_window = ImportExportWindow(token)
            #     self.import_export_window.show()
            # else :
            #     print("Token is invalid")
            #     iface.messageBar().pushMessage(f"Unauthorized User. Please login with a valid user", level=2, duration=5)
            #     self.dlg.close()

        else:
            print("No token found")
            iface.messageBar().pushMessage(f"Error in validating the user. Please try after sometime", level=2, duration=5)
            self.dlg.close()


    def open_web_page(self):
        try:
            print("Clicked on login button")
            self.initial_redirection_done = False
            self.web_view = self.dlg.skydeckwebView
            self.web_view.load(QUrl(f"{ManageSkydeck.endpoint}/auth/login"))
            self.web_view.urlChanged.connect(self.on_url_changed)
        except Exception as e:
            print(f"Error : {e}")





    def clear(self):
        self.dlg.importURL.clear()
        self.dlg.importToken.clear()
        self.dlg.importRasterList.clear()
        self.dlg.importVectorList.clear()
        self.dlg.importFileListGroupBox.setVisible(False)
        self.dlg.exportURL.clear()
        self.dlg.exportToken.clear()
        self.dlg.exportRasterList.clear()
        self.dlg.exportVectorList.clear()
        self.dlg.exportFileListGroupBox.setVisible(False)
        print("Cleared the form fields")

    def get_sas(self):
        token = str(self.dlg.importToken.text()) if self.dlg.importToken.text() else str(self.dlg.exportToken.text())
        headers = {"Authorization": f"Bearer {token}"}
        response = requests.get(url=f"{ManageSkydeck.endpoint}/api/gis/v1/qgis/get-sas", headers=headers)
        print(f"Response message from sas: {response.json()}")
        sas = response.json()["sas"]
        print(f"SAS token: {sas}")
        #sas = "sv=2022-11-02&ss=bfqt&srt=sco&sp=rwdlacupiytfx&se=2024-05-17T18:56:06Z&st=2024-05-08T10:56:06Z&spr=https&sig=M%2BR%2B50ZJ7ico9PyVSu244n%2FZSOSDtXCOmibEtCNL%2BXk%3D"
        return sas


    def getRasterDict(self):
        file_url = str(self.dlg.importURL.text())
        url_parts = file_url.split('/')
        organisation_id = url_parts[5]
        site_id = url_parts[7]
        survey_id = url_parts[9]
        token = str(self.dlg.importToken.text())
        headers = {"Authorization": f"Bearer {token}"}
        raster_url = f"{ManageSkydeck.endpoint}/api/core/v1/organisations/{organisation_id}/sites/{site_id}/surveys/{survey_id}/rasters"
        response = requests.get(url=raster_url, headers=headers)
        return response


    def getVectorDict(self):
        file_url = str(self.dlg.importURL.text())
        url_parts = file_url.split('/')
        organisation_id = url_parts[5]
        site_id = url_parts[7]
        survey_id = url_parts[9]
        token = str(self.dlg.importToken.text())
        headers = {"Authorization": f"Bearer {token}"}
        raster_url = f"{ManageSkydeck.endpoint}/api/core/v1/organisations/{organisation_id}/sites/{site_id}/surveys/{survey_id}/vectors"
        response = requests.get(url=raster_url, headers=headers)
        return response
    
    def fetchQGISData(self):
        try:
            raster_layers = []
            vector_layers = []
            self.dlg.exportRasterList.clear()
            self.dlg.exportVectorList.clear()
            # Accessing the current project
            project = QgsProject.instance()
            # Getting all layers in the project
            layers = project.mapLayers()
            for layer_id, layer in layers.items():
                if isinstance(layer, QgsRasterLayer):
                    raster_layers.append(layer.name())
                elif isinstance(layer, QgsVectorLayer):
                    vector_layers.append(layer.name())
            for values in raster_layers:
                item = QListWidgetItem(values)
                item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
                item.setCheckState(QtCore.Qt.Unchecked)
                self.dlg.exportRasterList.addItem(item)
            for vector_values in vector_layers:
                vector_item = QListWidgetItem(vector_values)
                vector_item.setFlags(vector_item.flags() | QtCore.Qt.ItemIsUserCheckable)
                vector_item.setCheckState(QtCore.Qt.Unchecked)
                self.dlg.exportVectorList.addItem(vector_item)
            
            # Show the group box after populating the ListView
            self.dlg.exportFileListGroupBox.setVisible(True)
            print("Fetched data from Qgis")
        except Exception as e:
            print(f"Error in fetching data from QGIS: {e}")
            iface.messageBar().pushMessage(f"Error in fetching data from QGIS", level=2, duration=5)
            self.clear()
            self.dlg.close()
        

    def fetchSkydeckData(self):
        try:    
            global rasters_dict
            global vectors_dict
            print("Clicked on connect")
            self.dlg.importRasterList.clear()
            self.dlg.importVectorList.clear()
            raster_response = self.getRasterDict()
            rasters_dict = raster_response.json()
            raster_names = []
            print(f"Response message from skydeck raster: {raster_response}")
            for raster in rasters_dict["data"]["rasters"]:
                raster_names.append(raster["name"])
            for values in raster_names:
                item = QListWidgetItem(values)
                item.setFlags(item.flags() | QtCore.Qt.ItemIsUserCheckable)
                item.setCheckState(QtCore.Qt.Unchecked)
                self.dlg.importRasterList.addItem(item)


            vectors_response = self.getVectorDict()
            vectors_dict = vectors_response.json()
            vector_names = []
            print(f"Response message from skydeck vector: {vectors_response}")
            for vector in vectors_dict["data"]["vectors"]:
                vector_names.append(vector["name"])
            for vector_values in vector_names:
                vector_item = QListWidgetItem(vector_values)
                vector_item.setFlags(vector_item.flags() | QtCore.Qt.ItemIsUserCheckable)
                vector_item.setCheckState(QtCore.Qt.Unchecked)
                self.dlg.importVectorList.addItem(vector_item)


            # Show the group box after populating the ListView
            self.dlg.importFileListGroupBox.setVisible(True)
            print("Fetched data from Skydeck")
        except Exception as e:
            print(f"Error in fetching data from Skydeck: {e}")
            iface.messageBar().pushMessage(f"Error in fetching data from Skydeck", level=2, duration=5)
            self.clear()
            self.dlg.close()


    def addQGISLayer(self):
        try:
            print("Clicked on Import layer")
            sas = self.get_sas()
            for i in range(self.dlg.importRasterList.count()):
                item = self.dlg.importRasterList.item(i)
                if item.checkState() == QtCore.Qt.Checked:
                    print(f"Item checked: {item.text()}")
                    #file_url = self.getdownloadURL(item.text(), rasters_dict)
                    for raster in rasters_dict["data"]["rasters"]:
                        if raster["name"] == item.text():
                            file_url = raster["cogeotiff"]["downloadUrl"]
                            print("File URL: ", file_url)
                    layer_name = str(item.text())
                    if not file_url.startswith("/vsicurl/"):
                        file_url = "/vsicurl/" + file_url +"?"+ sas
                        print("Final File URL: ", file_url)
                    raster_layer = QgsRasterLayer(file_url, layer_name, "gdal")
                    if not raster_layer.isValid():
                        print(f"Error: Unable to load raster layer from {file_url}")
                    else:
                        # Add the raster layer to the map
                        QgsProject.instance().addMapLayer(raster_layer)
                        print(f"Raster layer added successfully: {layer_name}")
            
            print("Adding vector layer")
            for i in range(self.dlg.importVectorList.count()):
                vector_item = self.dlg.importVectorList.item(i)
                if vector_item.checkState() == QtCore.Qt.Checked:
                    print(f"vecter Item checked: {vector_item.text()}")
                    #file_url = self.getdownloadURL(item.text(), rasters_dict)
                    for vector in vectors_dict["data"]["vectors"]:
                        if vector["name"] == vector_item.text():
                            vector_file_url = vector["geojson"]["downloadUrl"]
                            print("Vctor File URL: ", vector_file_url)
                    vector_layer_name = str(vector_item.text())
                    vector_file_url = "/vsicurl/" + vector_file_url +"?"+ sas
                    print("Final vector  File URL: ", vector_file_url)
                    vector_layer = QgsVectorLayer(vector_file_url, vector_layer_name, "ogr")
                    if not vector_layer.isValid():
                        print(f"Error: Unable to load vector layer from {vector_file_url}")
                    else:
                        # Add the raster layer to the map
                        QgsProject.instance().addMapLayer(vector_layer)
                        print(f"Vector layer added successfully: {vector_layer_name}")

            iface.messageBar().pushMessage(f"Layer added successfully", level=3, duration=5)
            self.clear()
            self.dlg.close()
            print("Closed")
        except Exception as e:
            print(f"Error in adding layer: {e}")
            iface.messageBar().pushMessage(f"Error in adding layer", level=2, duration=5)
            self.clear()
            self.dlg.close()


    def uploadToSkydeck(self):
        try:
            print("Uploading data to skydeck")
            rasters_dict = {"rasters": []}
            vectors_dict = {"vectors": []}
            integration_URL = str(self.dlg.exportURL.text())
            url_parts = integration_URL.split('/')
            organisation_id = url_parts[5]
            site_id = url_parts[7]
            survey_id = url_parts[9]
            token = str(self.dlg.exportToken.text())
            headers = {"Authorization": f"Bearer {token}"}

            for i in range(self.dlg.exportRasterList.count()):
                item = self.dlg.exportRasterList.item(i)
                if item.checkState() == QtCore.Qt.Checked:
                    print(f"Item checked: {item.text()}")
                    raster_file_path = tempfile.NamedTemporaryFile(suffix=".tiff")
                    EPSG = 'EPSG:25832'
                    project = QgsProject.instance()
                    rlayer = project.mapLayersByName(item.text())[0]
                    pipe = QgsRasterPipe()
                    pipe.set(rlayer.dataProvider().clone())
                    file_writer = QgsRasterFileWriter(raster_file_path.name)
                    file_writer.writeRaster(pipe, rlayer.width(),rlayer.height(), rlayer.extent(), QgsCoordinateReferenceSystem(EPSG))
                    rasters_dict["rasters"].append({"filename": item.text(), "filepath": raster_file_path.name})

            print(f"Rasters dict done")

            for i in range(self.dlg.exportVectorList.count()):
                vector_item = self.dlg.exportVectorList.item(i)
                if vector_item.checkState() == QtCore.Qt.Checked:
                    print(f"Vector Item checked: {vector_item.text()}")
                    vector_file_path = tempfile.NamedTemporaryFile(suffix=".geojson")
                    project = QgsProject.instance()
                    vlayer = project.mapLayersByName(vector_item.text())[0]
                    QgsVectorFileWriter.writeAsVectorFormat(vlayer, vector_file_path.name, "utf-8", vlayer.crs(), "GeoJSON")
                    vectors_dict["vectors"].append({"filename": vector_item.text(), "filepath": vector_file_path.name})
            print(f"Vectors dict done")

            for raster in rasters_dict["rasters"]:
                raster_path = raster['filepath']
                raster_file_name = raster['filename']
                raster_options = {"Surface Model": "dsm", "Terrain Model": "dtm", "Orthophoto": "orthophoto", "NDVI":"ndvi", "Slope Map":"slope"}
                selected_text = self.dlg.rasterType.currentText()
                raster_type = raster_options[selected_text] if selected_text in raster_options else "other"
                raster_request_path = f"/api/core/v1/organisations/{organisation_id}/sites/{site_id}/surveys/{survey_id}/rasters"
                raster_sizeInBytes = os.path.getsize(raster_path)
                raster_url = ManageSkydeck.endpoint+raster_request_path
                raster_data = {"name": raster_file_name, "type": raster_type}
                try:
                    raster_con = requests.post(raster_url, headers=headers, json=raster_data)
                    raster_response = raster_con.json()
                    raster_id = raster_response["data"]["raster"]["uuid"]
                    raster_upload_path = ManageSkydeck.endpoint+raster_request_path+"/"+raster_id
                    #upload to blob
                    raster_sas = self.get_sas()
                    blob_url = ManageSkydeck.blob_endpoint
                    with open(raster_path, "rb") as file_obj:
                        service_client = BlobServiceClient(account_url=blob_url, credential=raster_sas)
                        blob_client = service_client.get_blob_client(container="raster", blob=raster_upload_path)
                        blob_client.upload_blob(file_obj, overwrite=True) 
                        print(f'-----Uploaded raster file to : {raster_upload_path}-----')
                    raster_payload = {
                        "type": raster_type,
                        "geotiff": {
                            "name": raster_file_name,
                            "downloadUrl": blob_client.url,
                            "sizeInBytes": raster_sizeInBytes,
                            "uploadStatus": "uploaded",
                        },
                    }
                    raster_upload_response = requests.patch(raster_upload_path, headers=headers, json=raster_payload)
                    if raster_upload_response.status_code == 200:
                        iface.messageBar().pushMessage(f"Raster Upload Success!", level=3, duration=5)
                    else:
                         iface.messageBar().pushMessage(f"Raster Upload Failed!", level=2, duration=5)
                    print(f"Raster response : {raster_upload_response.json()}")
                except Exception as e:
                    print(f"Error in uploading the raster : {e}")
                    iface.messageBar().pushMessage(f"Error in uploading the raster ", level=2, duration=5)

            for vector in vectors_dict["vectors"]:
                vector_file_name = vector['filename']
                vector_path = vector['filepath']
                url_parts = integration_URL.split('/')
                organisation_id = url_parts[5]
                site_id = url_parts[7]
                survey_id = url_parts[9]
                request_path = f"/api/core/v1/organisations/{organisation_id}/sites/{site_id}/surveys/{survey_id}/vectors"

                vector_sizeInBytes = os.path.getsize(vector_path)
                vector_url = ManageSkydeck.endpoint+request_path
                data = {"name": vector_file_name, "type": "geojson"}
                try:
                    con = requests.post(vector_url, headers=headers, json=data)
                    vector_response = con.json()
                    vector_id = vector_response["data"]["vector"]["uuid"]
                    vector_upload_path = ManageSkydeck.endpoint+request_path+"/"+vector_id
                    #upload to blob
                    vector_sas = self.get_sas()
                    blob_url = ManageSkydeck.blob_endpoint
                    with open(vector_path, "rb") as file_obj:
                        vector_service_client = BlobServiceClient(account_url=blob_url, credential=vector_sas)
                        vector_blob_client = vector_service_client.get_blob_client(container="vector", blob=vector_upload_path)
                        vector_blob_client.upload_blob(file_obj, overwrite=True) 
                        print(f'-----Uploaded vector file to : {vector_upload_path}-----')

                    vector_payload = {
                        "type": "geojson",
                        "geojson": {
                            "name": vector_file_name,
                            "downloadUrl": vector_blob_client.url,
                            "sizeInBytes": vector_sizeInBytes,
                            "uploadStatus": "uploaded",
                        },
                    }
                    v_upload_response = requests.patch(vector_upload_path, headers=headers, json=vector_payload)
                    if v_upload_response.status_code == 200:
                        iface.messageBar().pushMessage(f"Vector Upload Success!", level=3, duration=5)
                    else:
                         iface.messageBar().pushMessage(f"Vector Upload Failed!", level=2, duration=5)
                    print(f"vector response : {v_upload_response.json()}")
                except Exception as e:
                    print(f"Error in uploading the vector : {e}")
                    iface.messageBar().pushMessage(f"Error in uploading the vector ", level=2, duration=5)

            self.clear()
            self.dlg.close()
            print("Closed")
        except Exception as e:  
            print(f"Error in uploading data to Skydeck: {e}")
            iface.messageBar().pushMessage(f"Error in uploading data to Skydeck", level=2, duration=5)
            self.clear()
            self.dlg.close()


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&SkyGIS'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            

        # show the dialog
        self.dlg.show()

        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
